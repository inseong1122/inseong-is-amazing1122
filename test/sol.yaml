Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.  
    Default: 'testtrest'

Resources:

# VPC1 Resource
# VPC1 & IGW
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
     CidrBlock: 10.1.0.0/16
     EnableDnsSupport: true
     EnableDnsHostnames: true
     Tags:
      - Key: Name
        Value: VPC1-Seoul-AWS1
  VPC1InternetGateway1:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-IGW1
  VPC1InternetGatewayAttachment1:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VPC1InternetGateway1
      VpcId: !Ref VPC1

# VPC1 RT Route Subnet
  VPC1RouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1RouteTable1
  VPC1Route1:
    Type: AWS::EC2::Route
    DependsOn: VPC1InternetGatewayAttachment1
    Properties:
      RouteTableId: !Ref VPC1RouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPC1InternetGateway1

  VPC1Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.1.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1Subnet1
          
  VPC1Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RouteTable1
      SubnetId: !Ref VPC1Subnet1

  VPC1Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.2.0/24
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1Subnet2
  VPC1Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RouteTable1
      SubnetId: !Ref VPC1Subnet2

  VPC1RouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1RouteTable2
  VPCEIP2:
      Type: AWS::EC2::EIP
      Properties:
          Domain: vpc
  VPC1NatGateway1:  
    Type: AWS::EC2::NatGateway
    DependsOn: VPC1InternetGatewayAttachment1
    Properties: 
      AllocationId: !GetAtt VPCEIP2.AllocationId
      SubnetId: !Ref VPC1Subnet2
      Tags: 
        - Key: Name
          Value: VPC1-AWS-NGW1
          
  VPC1Route2:
    Type: AWS::EC2::Route
    DependsOn: VPC1InternetGatewayAttachment1
    Properties:
      RouteTableId: !Ref VPC1RouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref VPC1NatGateway1          

  VPC1Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.3.0/24
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1Subnet3
  VPC1Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RouteTable2
      SubnetId: !Ref VPC1Subnet3

  VPC1Subnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.4.0/24
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1Subnet4

  VPC1Subnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RouteTable2
      SubnetId: !Ref VPC1Subnet4

  VPC1Subnet5:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.5.0/24
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1Subnet5

  VPC1Subnet5RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RouteTable2
      SubnetId: !Ref VPC1Subnet5         
          
  VPC1Subnet6:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.6.0/24
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1Subnet6

  VPC1Subnet6RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RouteTable2
      SubnetId: !Ref VPC1Subnet6

  VPC1Subnet7:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.7.0/24
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1Subnet7
          
  VPC1Subnet7RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RouteTable2
      SubnetId: !Ref VPC1Subnet7         
          
  VPC1Subnet8:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.8.0/24
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1Subnet8
          
  VPC1Subnet8RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VPC1RouteTable2
      SubnetId: !Ref VPC1Subnet8          
 
  VPC1Subnet9:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.1.9.0/24
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1Subnet9
          
  VPC1Subnet10:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.1.10.0/24
      Tags:
        - Key: Name
          Value: VPC1-Seoul-AWS-VPC1Subnet10
          
# VPC1 Instance는 ami로 수동 생성

  VPC1Instance1ENI:
   Type: AWS::EC2::NetworkInterface
   Properties:
       SubnetId: !Ref VPC1Subnet1
       Description: VPC1Instance1 eth0
       GroupSet:
       - !Ref VPC1SG1
       PrivateIpAddress: 10.1.1.100
       Tags:
           - Key: Name
             Value: VPC1-AWS-Instance1 eth0
             
  VPCEIP3:
      Type: AWS::EC2::EIP
      Properties:
          Domain: vpc
          
  VPCAssociateEIP3:
      Type: AWS::EC2::EIPAssociation
      Properties:
          AllocationId: !GetAtt VPCEIP3.AllocationId
          NetworkInterfaceId: !Ref VPC1Instance1ENI

  VPC1Instance1:
   Type: AWS::EC2::Instance
   Properties:
     ImageId: ami-04e8dfc09b22389ad
     InstanceType: t2.micro
     KeyName: !Ref KeyName
     Tags:
       - Key: Name
         Value: AWS-Bastion-Instance1
     NetworkInterfaces:
       - NetworkInterfaceId: !Ref VPC1Instance1ENI
         DeviceIndex: 0

  VPC1SG1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-Seoul-AWS-NATInstance-SecurityGroup
      Tags:
      - Key : Name
        Value : VPC1-AWS-Bastion-SecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
        
  VPC1SG2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-Seoul-AWS-WebSrv-SecurityGroup
      Tags:
      - Key : Name
        Value : VPC1-Seoul-AWS-WebSrv-SecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 10.0.0.0/8
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  VPC1SG3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-Seoul-AWS-ALB-SecurityGroup
      Tags:
      - Key : Name
        Value : VPC1-Seoul-AWS-ALB-SecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0

  VPC1SG4:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-Seoul-AWS-Resolver-SG
      Tags:
      - Key : Name
        Value : VPC1-Seoul-AWS-Resolver-SG
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '53'
        ToPort: '53'
        CidrIp: 10.0.0.0/8
      - IpProtocol: udp
        FromPort: '53'
        ToPort: '53'
        CidrIp: 10.0.0.0/8
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
        
  VPC1SG5:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: VPC1-Seoul-AWS-WASSrv-SecurityGroup
      Tags:
      - Key : Name
        Value : VPC1-Seoul-AWS-WASSrv-SecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 10.0.0.0/8
      - IpProtocol: tcp
        FromPort: '8080'
        ToPort: '8080'
        CidrIp: 0.0.0.0/0       
        
# ALB
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Name: VPC1-Seoul-AWS-ALB-WEB
      SecurityGroups:
        - !Ref VPC1SG3
      Subnets:
        - !Ref VPC1Subnet1
        - !Ref VPC1Subnet2

  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ALBTG-WEB
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /
      VpcId: !Ref VPC1
      Tags:
      - Key : Name
        Value : VPC1-Seoul-AWS-ALBTG-WEB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      
  ALB2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      Name: VPC1-Seoul-AWS-ALB-WAS
      SecurityGroups:
        - !Ref VPC1SG3
      Subnets:
        - !Ref VPC1Subnet5
        - !Ref VPC1Subnet6

  ALBTG2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ALBTG-WAS
      Port: 8080
      Protocol: HTTP
      HealthCheckPath: /
      VpcId: !Ref VPC1
      Tags:
      - Key : Name
        Value : VPC1-Seoul-AWS-ALBTG-WAS

  ALBListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG2
      LoadBalancerArn: !Ref ALB2
      Port: 8080
      Protocol: HTTP
      
########################### asg

  # LC:
    # Type: AWS::AutoScaling::LaunchConfiguration
    # Properties:
      # ImageId: ami-0c9a045e7651dac0e
      # InstanceType: t2.micro
      # InstanceMonitoring: true
      # LaunchConfigurationName: webserverLC
      # UserData:
        # Fn::Base64: |
          #!/bin/bash
          # (
          # echo "qwe123"
          # echo "qwe123"
          # ) | passwd --stdin root
          # sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          # sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          # service sshd restart
            # systemctl enable nginx
            # systemctl restart nginx 
        # SecurityGroups:
          # - !Ref VPC1SG2
        
  # ASG:
    # Type: AWS::AutoScaling::AutoScalingGroup
    # Properties:
      # AutoScalingGroupName: webserverASG
      # VPCZoneIdentifier:
        # - !Ref VPC1Subnet3
        # - !Ref VPC1Subnet4
      # Cooldown: 10         
      # LaunchConfigurationName: !Ref LC
      # MaxSize: 4
      # MinSize: 2
      # DesiredCapacity: 2   
      # HealthCheckGracePeriod: 300
      # MaxInstanceLifetime: 2592000 
      # TargetGroupARNs:
        # - !Ref ALBTG
      # NotificationConfiguration:
        # TopicARN:
          # Ref: NotificationTopic
        # NotificationTypes:
        # - autoscaling:EC2_INSTANCE_LAUNCH
        # - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        # - autoscaling:EC2_INSTANCE_TERMINATE
        # - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      # Tags:
        # - Key: Name
          # Value: web-asg
          # PropagateAtLaunch: true 

# ㅡㅡㅡㅡ sns ㅡㅡㅡㅡ
  # NotificationTopic:
    # Type: AWS::SNS::Topic
    # Properties:
      # Subscription:
      # - Endpoint: "rlagytlr10@naver.com"
        # Protocol: email    
              
# ㅡㅡㅡㅡ cloudwatch ㅡㅡㅡㅡ
  # WebServerScaleUpPolicy:
    # Type: AWS::AutoScaling::ScalingPolicy
    # Properties:
      # AdjustmentType: ChangeInCapacity
      # AutoScalingGroupName:
        # Ref: ASG
      # Cooldown: '60'
      # ScalingAdjustment: '1'
  # WebServerScaleDownPolicy:
    # Type: AWS::AutoScaling::ScalingPolicy
    # Properties:
      # AdjustmentType: ChangeInCapacity
      # AutoScalingGroupName:
        # Ref: ASG
      # Cooldown: '60'
      # ScalingAdjustment: "-1"
  # CPUAlarmHigh:
    # Type: AWS::CloudWatch::Alarm
    # Properties:
      # AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      # MetricName: CPUUtilization
      # Namespace: AWS/EC2
      # Statistic: Average
      # Period: '300'
      # EvaluationPeriods: '2'
      # Threshold: '90'
      # AlarmActions:
      # - Ref: WebServerScaleUpPolicy
      # Dimensions:
      # - Name: AutoScalingGroupName
        # Value:
          # Ref: ASG
      # ComparisonOperator: GreaterThanThreshold
  # CPUAlarmLow:
    # Type: AWS::CloudWatch::Alarm
    # Properties:
      # AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      # MetricName: CPUUtilization
      # Namespace: AWS/EC2
      # Statistic: Average
      # Period: '300'
      # EvaluationPeriods: '2'
      # Threshold: '70'
      # AlarmActions:
      # - Ref: WebServerScaleDownPolicy
      # Dimensions:
      # - Name: AutoScalingGroupName
        # Value:
          # Ref: ASG
      # ComparisonOperator: LessThanThreshold
      
  # LC2:
    # Type: AWS::AutoScaling::LaunchConfiguration
    # Properties:
      # ImageId: ami-0d96a549d7fe6bd38
      # InstanceType: t2.micro
      # InstanceMonitoring: true
      # LaunchConfigurationName: wasserverLC
      # UserData:
        # Fn::Base64: |
    #     #!/bin/bash
         # (
          # echo "qwe123"
          # echo "qwe123"
          # ) | passwd --stdin root
          # sed -i "s/^PasswordAuthentication no/PasswordAuthentication yes/g" /etc/ssh/sshd_config
          # sed -i "s/^#PermitRootLogin yes/PermitRootLogin yes/g" /etc/ssh/sshd_config
          # service sshd restart 
          # yum -y update
          # cd apache-tomcat-10.0.14/bin
          # ./startup.sh
      # SecurityGroups:
        # - !Ref VPC1SG5
        
  # ASG2:
    # Type: AWS::AutoScaling::AutoScalingGroup
    # Properties:
      # AutoScalingGroupName: wasserverASG
      # VPCZoneIdentifier:
        # - !Ref VPC1Subnet5
        # - !Ref VPC1Subnet6
      # Cooldown: 10
      # LaunchConfigurationName: !Ref LC2
      # MaxSize: 4
      # MinSize: 2
      # DesiredCapacity: 2
      # TargetGroupARNs:
        # - !Ref ALBTG2
      # Tags:
        # - Key: Name
          # Value: was-asg
          # PropagateAtLaunch: true
          
  MyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: test
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.small
      Engine: MySQL
      EngineVersion: 8.0.25
      MasterUsername: test
      MasterUserPassword: password
      DBSubnetGroupName:
        Ref: myDBSubnetGroup
        
  myDBSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: description
      SubnetIds: 
        - !Ref VPC1Subnet8
        - !Ref VPC1Subnet7
      Tags: 
        - Key: Name
          Value: DB-Tier

  # ReplicaDB:
    # Type: AWS::RDS::DBInstance
    # Properties:
      # SourceDBInstanceIdentifier:
        # Ref: MyDB
      # DBInstanceClass: db.t2.small
      # Tags:
      # - Key: Name
        # Value: Read Replica Database